import numpy as np
import cv2 as cv
from image import readImage, writeImagesList, applyGrayscale, applyNoiseRemoval
from segmentation import adaptiveThreshold, lineLevelSegmentation, wordLevelSegmentation
from plot import plotImage, plotHistogram

def generateLines(binaryImage):
    # applies a segmentation that returns an array of text lines
    lineImages = lineLevelSegmentation(binaryImage)
    writeImagesList(lineImages, "src/outputImages/lines/", ".jpg") # writes the line images on the path folder
    return lineImages

def generateWords(lineImagesList):
    # applies a segmentation on each line that returns an array of words from that text line
    wordsImages = []
    for line in lineImagesList:
        wordsImages.append(wordLevelSegmentation(line))    
    # it writes the image files for each words list in wordImages 
    for line in wordsImages:
        writeImagesList(line, "src/outputImages/characteres/", ".jpg") # writes the words images on the path folder
    return wordsImages

def main():

    imgFolder = "src/inputImages/"
    imgName = "bookpage"
    imgFormat = ".jpg"
    inputImage = readImage(imgFolder + imgName + imgFormat) # reads image file from folder

    modifiedInputImage = applyGrayscale(inputImage) # filters the image to grayscale
    modifiedInputImage = applyNoiseRemoval(modifiedInputImage) # applies a filter to remove noise
    binaryInputImage = adaptiveThreshold(modifiedInputImage) # applies adaptive threshold to get a binary image

    # plotting binary image
    plotImage(binaryInputImage, "Binary image generated by Adaptive Threshold")

    # does the segmentation and returns an array of images, each image is a text line
    lineImages = generateLines(binaryInputImage)

    # uses the lines list to segmentate words. Returns a matrix where each index is a list of words from the same line
    wordsMatrix = generateWords(lineImages)
   

if __name__ == "__main__":
    main()